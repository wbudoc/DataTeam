###################################################################################################################
1.用户信息
配置的是我的用户名和email。每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，会随更新内容一起被永久纳入历史记录
###################################################################################################################
git config --global user.name "fipped"
git config --global user.email "823188494@qq.com"

###################################################################################################################
2.查看配置信息
###################################################################################################################
要检查已有的配置信息可以使用 git config --list 命令，单独查看某项配置信息可以用 git config user.name

###################################################################################################################
3.检查本机是否有ssh key设置,进入git bash
###################################################################################################################
$ cd ~/.ssh 或cd .ssh

如果没有则提示： No such file or directory
如果有则进入~/.ssh路径下（ls查看当前路径文件，rm * 删除所有文件）

ssh-keygen -t rsa -C "xxxxxx@yy.com" #建议填写自己真实有效的邮箱地址
Generating public/private rsa key pair.

Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa):   #不填直接回车
Enter passphrase (empty for no passphrase):   #输入密码（可以为空）
Enter same passphrase again:   #再次确认密码（可以为空）

Your identification has been saved in /c/Users/xxxx_000/.ssh/id_rsa.   #生成的密钥
Your public key has been saved in /c/Users/xxxx_000/.ssh/id_rsa.pub.  #生成的公钥
The key fingerprint is:
e3:51:33:xx:xx:xx:xx:xxx:61:28:83:e2:81 xxxxxx@yy.com

###################################################################################################################
4.添加ssh key到GItHub
###################################################################################################################
登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。
复制id_rsa.pub的公钥内容。

1) 进入c:/Users/xxxx_000/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。
2) Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“Add Key”。

###################################################################################################################
5.Git中用vim打开、修改、保存文件（转）
###################################################################################################################
一、vim 有两种工作模式：
1.命令模式：接受、执行 vim操作命令的模式，打开文件后的默认模式；

2.编辑模式：对打开的文件内容进行 增、删、改 操作的模式；

3.在编辑模式下按下ESC键，回退到命令模式；在命令模式下按i，进入编辑模式

二、创建、打开文件：

1.输入 touch 文件名 ，可创建文件。

2.使用 vim 加文件路径（或文件名）的模式打开文件，如果文件存在则打开现有文件，如果文件不存在则新建文件。

3.键盘输入字母i进入插入编辑模式。

三、保存文件：

1.在编辑模式下编辑文件

2.按下ESC键，退出编辑模式，切换到命令模式。

3.在命令模式下键入"ZZ"或者":wq"保存修改并且退出 vim。

4.如果只想保存文件，则键入":w"，回车后底行会提示写入操作结果，并保持停留在命令模式。

四、放弃所有文件修改：
1.放弃所有文件修改：按下ESC键进入命令模式，键入":q!"回车后放弃修改并退出vim。

2.放弃所有文件修改，但不退出 vi，即回退到文件打开后最后一次保存操作的状态，继续进行文件操作：按下ESC键进入命令模式，键入":e!"，回车后回到命令模式。

五、查看文件内容：

在git窗口，输入命令：cat 文件名

 六、创建文件夹

在git窗口，输入命令：touch 文件夹名

###################################################################################################################
5.连接本地资源库和远程库（github）
###################################################################################################################
把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

$ git remote add origin git@github.com:用户名/资源库名字.git   SSH 连接

添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
下一步，就可以把本地库的所有内容推送到远程库上：

$ git push -u origin master

###################################################################################################################
5.将远程库（github）克隆到本地
###################################################################################################################
$ git clone git@github.com:用户名/资源库名字.git

###################################################################################################################
5.创建和合并分支的命令
###################################################################################################################
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

